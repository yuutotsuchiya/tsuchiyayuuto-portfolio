{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  class: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_About = _resolveComponent(\"About\");\n\n  var _component_EntryThumbnail = _resolveComponent(\"EntryThumbnail\");\n\n  return _openBlock(), _createBlock(\"div\", _hoisted_1, [_createVNode(_component_About), (_openBlock(true), _createBlock(_Fragment, null, _renderList($setup.entries, function (entry) {\n    return _openBlock(), _createBlock(_component_EntryThumbnail, {\n      image: entry.image\n    }, null, 8\n    /* PROPS */\n    , [\"image\"]);\n  }), 256\n  /* UNKEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"sources":["/Users/tsuchiyayuuto/Desktop/github/site-start-vue/blog/src/views/Home.vue"],"names":[],"mappings":";;;;AACO,EAAA,KAAK,EAAC;;;;;;;uBAAX,YAAA,CAMM,KANN,EAAA,UAAA,EAMM,CALJ,YAAA,CAAS,gBAAT,CAKI,G,kBAJJ,YAAA,CAGE,SAHF,EAGE,IAHF,EAGE,WAAA,CAFgB,MAAA,CAAA,OAEhB,EAFuB,UAAhB,KAAgB,EAAX;yBADd,YAAA,CAGE,yBAHF,EAGE;AADC,MAAA,KAAK,EAAE,KAAK,CAAC;AACd,KAHF,E,IAAA,E;;AAAA,M,SAAA,C;GAGE,CAHF,E;;AAAA,GAII,EANN,C","sourcesContent":["<template>\n  <div class=\"home\">\n    <About />\n    <EntryThumbnail\n      v-for=\"entry in entries\"\n      :image=\"entry.image\"\n    />\n  </div>\n</template>\n<script>\n// @ is an alias to /src\nimport { onMounted, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport About from '@/components/About.vue'\nimport EntryThumbnail from '@/components/EntryThumbnail.vue'\nexport default {\n  name: 'Home',\n  components: {\n    About,\n    EntryThumbnail\n  },\n  setup() {\n    const store = useStore();\n    const getEntries = () => store.dispatch('getEntries')\n    onMounted(() => {\n      getEntries()\n    })\n    return {\n      entries: computed(() => store.state.entries),\n    }\n  }\n}\n</script>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}